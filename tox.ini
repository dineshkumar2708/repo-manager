[tox]
envlist =
    autoformat,
    py{37,38}-{local,integ},
    noenvvars, sourcebuildcheck,
    {flake8,pylint}{,-tests},
    mypy,
    bandit,
    # prone to false positives
    vulture

##############################################################################################
# Additional environments:                                                                   #
#                                                                                            #
# autoformat : Apply all autoformatters.                                                     #
# lint :: Run all linters.                                                                   #
# vulture :: Run vulture. Prone to false-positives.                                          #
#                                                                                            #
# Operational helper environments:                                                           #
#                                                                                            #
# park :: Build name-parking packages using pypi-parker.                                     #
# build :: Build source and wheel dist files.                                                #
# test-release :: Build dist files and upload to testpypi pypirc profile.                    #
# release :: Build dist files and upload to pypi pypirc profile.                             #
##############################################################################################

#########
# Tests #
#########

[testenv:base-command]
commands = pytest --basetemp={envtmpdir} -l --cov repo_admin {posargs}

[testenv]
passenv =
    # Pass through AWS credentials
    AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \
    # Pass through AWS profile name (useful for local testing)
    AWS_PROFILE \
    # Pass through the default AWS region (used for integration tests)
    AWS_DEFAULT_REGION
sitepackages = False
deps = -rtest/requirements.txt
commands =
    # Local tests: no network access required
    local: {[testenv:base-command]commands} test/ -m local
    # Integration tests: requires network access and might require service credentials
    integ: {[testenv:base-command]commands} test/ -m integ
    # Acceptance tests: testing against static test vectors : same requirements as integ
    accept: {[testenv:base-command]commands} test/ -m accept
    # Run all known tests : same requirements as integ
    all: {[testenv:base-command]commands} test/
    # You decide what tests to run
    manual: {[testenv:base-command]commands}

# Verify that local tests work without environment variables present
[testenv:noenvvars]
basepython = python3
sitepackages = False
deps = {[testenv]deps}
commands = {[testenv:base-command]commands} test/ -m local

# Verify that tests can be successfully run from the source build.
[testenv:sourcebuildcheck]
basepython = python3
sitepackages = False
recreate = True
deps =
    {[testenv:build]deps}
commands =
    {[testenv:build]commands}
    {toxinidir}/test/source-build-check.sh {envtmpdir} {toxinidir}/dist

###############
# Type checks #
###############

[testenv:mypy-coverage]
commands =
    # Make mypy linecoverage report readable by coverage
    python -c \
        "t = open('.coverage', 'w');\
        c = open('build/coverage.json').read();\
        t.write('!coverage.py: This is a private format, don\'t read it directly!\n');\
        t.write(c);\
        t.close()"
    coverage report -m

[testenv:mypy]
basepython = python3
deps =
    # the coverage report hack breaks with coverage 5.0 :(
    # find a better solution
    coverage<5
    mypy>=0.650
    mypy_extensions
    typing>=3.6.2
commands =
    python -m mypy \
        --linecoverage-report build \
        src/repo_admin/ \
        {posargs}
    {[testenv:mypy-coverage]commands}

###############################
# Formatting and style checks #
###############################

[testenv:flake8]
basepython = python3
deps =
    flake8
    flake8-docstrings
    flake8-isort
    flake8-print>=3.1.0
    flake8-bugbear
commands =
    flake8 \
        src/repo_admin/ \
        setup.py

[testenv:flake8-tests]
basepython = {[testenv:flake8]basepython}
deps = {[testenv:flake8]deps}
commands =
    flake8 \
        # Ignore F811 redefinition errors in tests (breaks with pytest-mock use)
        # Ignore F841 local variable assigned but never used (useful for collecting locals for test reports)
        # Ignore D101,D102,D103 docstring requirements for tests
        # Ignore B011 assert False warning (never run tests with python -O)
        --ignore F811,F841,D101,D102,D103,B011 \
        test/

[testenv:pylint]
basepython = python3
deps =
    {[testenv]deps}
    pyflakes
    pylint>=2.0.0
commands =
    pylint \
        --rcfile=src/pylintrc \
        src/repo_admin/  \
        setup.py

[testenv:pylint-tests]
basepython = {[testenv:pylint]basepython}
deps = {[testenv:pylint]deps}
commands =
    pylint \
        --rcfile=test/pylintrc \
        test/unit/ \
        test/functional/ \
        test/integration/

[testenv:bandit]
basepython = python3
deps = bandit
commands = bandit \
    # B322: Ignore Python 2 input check: we only support Python 3
    -s B322 \
    -r src/repo_admin/

# Prone to false positives: only run manually
[testenv:vulture]
basepython = python3
deps = vulture
commands = vulture src/repo_admin/

[testenv:blacken-src]
basepython = python3
deps =
    black
commands =
    black --line-length 90 \
        src/repo_admin/ \
        setup.py \
        test/ \
        {posargs}

[testenv:blacken]
basepython = python3
deps =
    {[testenv:blacken-src]deps}
commands =
    {[testenv:blacken-src]commands}

[testenv:isort-seed]
basepython = python3
deps = seed-isort-config
commands = seed-isort-config

[testenv:isort]
basepython = python3
deps = isort
commands = isort \
    -rc \
        src \
        test \
        setup.py \
    {posargs}

[testenv:autoformat]
basepython = python3
deps =
    {[testenv:isort-seed]deps}
    {[testenv:isort]deps}
    {[testenv:blacken]deps}
commands =
    {[testenv:isort-seed]commands}
    {[testenv:isort]commands}
    {[testenv:blacken]commands}

[testenv:lint]
basepython = python3
# This does not actually ignore errors,
#  it just runs all commands regardless of whether any fail.
#  If any fail, the final result is still a fail.
ignore_errors = true
deps =
    {[testenv:autoformat]deps}
    {[testenv:flake8]deps}
    {[testenv:flake8-tests]deps}
    {[testenv:pylint]deps}
    {[testenv:pylint-tests]deps}
    {[testenv:bandit]deps}
commands =
    {[testenv:autoformat]commands}
    {[testenv:flake8]commands}
    {[testenv:flake8-tests]commands}
    {[testenv:pylint]commands}
    {[testenv:pylint-tests]commands}
    {[testenv:bandit]commands}

###################
# Release tooling #
###################

[testenv:build]
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py bdist_wheel
